<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title></title>
</head>
<body data-spy="scroll" data-target="#navbarGettingStarted">
<div class="jumbotron">
    <div class="container">
        <h1>Flexible XML framework for Java.</h1>
    </div>
</div>

<div class="card-deck">
    <div>
        <div>
            <h3>dom4j-1.6.1</h3>
            <ul>
                <li>XML Document Object Model based on Java Collections Framework</li>
                <li>Java 1.4+</li>
            </ul>
        </div>
        <div>
            <div>
                <div class="float-right released">
                    <small class="text-muted">Released on May 20, 2005</small>
                </div>
                <div class="dropdown">
                    <button class="btn btn-secondary" id="download-1_6_1">Download 1.6.1</button>
                    <a href="{github}/dom4j/releases/download/dom4j_1_6_1/dom4j-1.6.1.jar" title="library only">dom4j-1.6.1.jar</a>
                    <a href="{github}/dom4j/releases/download/dom4j_1_6_1/dom4j-1.6.1.tar.gz"
                       title="library, source code, dependency libraries, documentation">dom4j-1.6.1.tar.gz</a>
                    <a href="{github}/dom4j/releases/download/dom4j_1_6_1/dom4j-1.6.1.zip"
                       title="library, source code, dependency libraries, documentation">dom4j-1.6.1.zip</a>
                    <hr/>
                    <a href="{github}/dom4j/tree/dom4j_1_6_1">Sources on GitHub</a>
                    <a href="http://repo1.maven.org/maven2/dom4j/dom4j/1.6.1/dom4j-1.6.1-sources.jar">Sources JAR in
                        Maven repository</a>
                </div>
            </div>
        </div>
    </div>
    <div>
        <div>
            <h3>dom4j-2.0.0</h3>
            <ul>
                <li>XML Document Object Model based on Java Collections Framework</li>
                <li>Java 5+</li>
                <li>Generics support</li>
            </ul>
        </div>
        <div>
            <div class="float-right released">
                <small class="text-muted">Released on April 13, 2016</small>
            </div>
            <div class="dropdown">
                <button class="btn btn-secondary" id="download-2.0.">Download 2.0.0</button>
                <a href="{github}/dom4j/releases/download/v2.0.0/dom4j-2.0.0.jar">dom4j-2.0.0.jar</a>
                <a href="{github}/dom4j/releases/download/v2.0.0/dom4j-2.0.0-sources.jar">dom4j-2.0.0-sources.jar</a>
                <a href="{github}/dom4j/releases/download/v2.0.0/dom4j-2.0.0-javadoc.jar">dom4j-2.0.0-javadoc.jar</a>
                <hr/>
                <a href="{github}/dom4j/tree/v2.0.0">Sources on GitHub</a>
            </div>
        </div>
    </div>
</div>

<div class="mt-2">
    <h2>Getting started</h2>
    <nav class="navbar sticky-top navbar-toggleable-md navbar-light bg-faded navbar-inpage">
        <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarGettingStarted" aria-controls="navbarText"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <a class="navbar-brand" href="#top">Home</a>
        <div class="collapse navbar-collapse" id="navbarGettingStarted">
            <ul class="navbar-nav nav-pills mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#parsing">Parsing XML</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#iterators">Iterators</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#xpath">XPath</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#looping">Looping</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#creating-document">Creating XML</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#file-write">Writing to a file</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#string-conversion">Converting to and from Strings</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#xslt">Transforming with XSLT</a>
                </li>
            </ul>
        </div>
    </nav>
    <section>
        <h3 id="parsing">Parsing XML</h3>
        <p>One of the first things you'll probably want to do is to parse an XML document of some kind. This is easy to do in <span class="logo"/>. The
            following code demonstrates how to this.</p>
        <pre data-language="java">
import java.net.URL;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;

public class Foo {

    public Document parse(URL url) throws DocumentException {
        SAXReader reader = new SAXReader();
        Document document = reader.read(url);
        return document;
    }
}
</pre>
    </section>

    <section>
        <h3 id="iterators">Using Iterators</h3>
        <p>A document can be navigated using a variety of methods that return standard Java Iterators. For example</p>
        <pre data-language="java">
    public void bar(Document document) throws DocumentException {

        Element root = document.getRootElement();

        // iterate through child elements of root
        for (Iterator&lt;Element&gt; it = root.elementIterator(); it.hasNext();) {
            Element element = it.next();
            // do something
        }

        // iterate through child elements of root with element name "foo"
        for (Iterator&lt;Element&gt; it = root.elementIterator("foo"); it.hasNext();) {
            Element foo = it.next();
            // do something
        }

        // iterate through attributes of root
        for (Iterator&lt;ttribute&gt; it = root.attributeIterator(); it.hasNext();) {
            Attribute attribute = it.next();
            // do something
        }
     }
</pre>
    </section>

    <section>
        <h3 id="xpath">Powerful Navigation with XPath</h3>
        <p>In <span class="logo"/> XPath expressions can be evaluated on the <code>Document</code> or on any <code>Node</code> in the tree (such as <code>Attribute</code>,
            <code>Element</code> or
            <code>ProcessingInstruction</code>). This allows complex navigation throughout the document with a single line of code. For example</p>
        <pre data-language="java">
    public void bar(Document document) {
        List&lt;Node&gt; list = document.selectNodes("//foo/bar");

        Node node = document.selectSingleNode("//foo/bar/author");

        String name = node.valueOf("@name");
    }
</pre>

        <p>For example if you wish to find all the hypertext links in an <abbr title="eXtensible Hypertext Markup Language">XHTML</abbr> document the following
            code would do the trick.</p>

        <pre data-language="java">
    public void findLinks(Document document) throws DocumentException {

        List&lt;Node&gt; list = document.selectNodes("//a/@href");

        for (Iterator&lt;Node&gt; iter = list.iterator(); iter.hasNext();) {
            Attribute attribute = (Attribute) iter.next();
            String url = attribute.getValue();
        }
    }
</pre>

        <p>If you need any help learning the <abbr title="XML Path">XPath</abbr> language we highly recommend the <a
                href="http://www.zvon.org/xxl/XPathTutorial/General/examples.html">Zvon
            tutorial</a> which allows you to learn by example.</p>
    </section>

    <section>
        <h3 id="looping">Fast Looping</h3>
        <p>If you ever have to walk a large <abbr title="eXtensible Markup Language">XML</abbr> document tree then for performance we recommend you use the fast
            looping method which avoids the cost of creating an <code>Iterator</code> object for each loop. For example</p>
        <pre data-language="java">
    public void treeWalk(Document document) {
        treeWalk(document.getRootElement());
    }

    public void treeWalk(Element element) {
        for (int i = 0, size = element.nodeCount(); i &lt; size; i++) {
            Node node = element.node(i);
            if (node instanceof Element) {
                treeWalk((Element) node);
            }
            else {
                // do something…
            }
        }
    }
</pre>
    </section>

    <section>
        <h3 id="creating-document">Creating a new XML document</h3>
        <p>Often in <span class="logo"/> you will need to create a new document from scratch. Here's an example of doing that.</p>
        <pre data-language="java">
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

public class Foo {

    public Document createDocument() {
        Document document = DocumentHelper.createDocument();
        Element root = document.addElement("root");

        Element author1 = root.addElement("author")
            .addAttribute("name", "James")
            .addAttribute("location", "UK")
            .addText("James Strachan");

        Element author2 = root.addElement("author")
            .addAttribute("name", "Bob")
            .addAttribute("location", "US")
            .addText("Bob McWhirter");

        return document;
    }
}
</pre>
    </section>

    <section>
        <h3 id="file-write">Writing a document to a file</h3>
        <p>A quick and easy way to write a <code>Document</code> (or any <code>Node</code>) to a <code>Writer</code> is via the <code>write()</code> method.</p>

        <pre data-language="java">
  FileWriter out = new FileWriter("foo.xml");
  document.write(out);
</pre>
        <p>If you want to be able to change the format of the output, such as pretty printing or a compact format, or you want to be able to work with <code>Writer</code>
            objects or <code>OutputStream</code> objects as the destination, then you can use the <code>XMLWriter</code> class.</p>

        <pre data-language="java">
import org.dom4j.Document;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;

public class Foo {

    public void write(Document document) throws IOException {

        // lets write to a file
        try (new FileWriter("output.xml")) {
            XMLWriter writer = new XMLWriter(fileWriter);
            writer.write( document );
            writer.close();
        }


        // Pretty print the document to System.out
        OutputFormat format = OutputFormat.createPrettyPrint();
        writer = new XMLWriter(System.out, format);
        writer.write( document );

        // Compact format to System.out
        format = OutputFormat.createCompactFormat();
        writer = new XMLWriter(System.out, format);
        writer.write(document);
    }
}
</pre>
    </section>

    <section>
        <h3 id="string-conversion">Converting to and from Strings</h3>
        <p>If you have a reference to a <code>Document</code> or any other <code>Node</code> such as an <code>Attribute</code> or <code>Element</code>, you can
            turn it into the default XML text via the <code>asXML()</code> method.</p>
        <pre data-language="java">
        Document document = …;
        String text = document.asXML();
</pre>
        <p>If you have some XML as a <code>String</code> you can parse it back into a <code>Document</code> again using the helper method <code>DocumentHelper.parseText()</code>
        </p>

        <pre data-language="java">
        String text = "&lt;person&gt; &lt;name&gt;James&lt;/name&gt; &lt;/person&gt;";
        Document document = DocumentHelper.parseText(text);
</pre>
    </section>

    <section>
        <h3 id="xslt">Transforming a <code>Document</code> with XSLT</h3>
        <p>Applying <abbr title="eXtensible Stylesheet Language Transformations">XSLT</abbr> on a <code>Document</code> is quite straightforward using the <a
                href="http://docs.oracle.com/javase/8/docs/technotes/guides/xml/jaxp/index.html"><abbr title="Java API for XML Processing">JAXP</abbr></a>
            API from Oracle. This allows you to work against any XSLT engine such as <a href="https://xalan.apache.org/">Xalan</a> or <a
                    href="http://www.saxonica.com">Saxon</a>. Here is an example of using JAXP to create a transformer
            and then applying it to a <code>Document</code>.</p>
        <pre data-language="java">
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;

import org.dom4j.Document;
import org.dom4j.io.DocumentResult;
import org.dom4j.io.DocumentSource;

public class Foo {

    public Document styleDocument(Document document, String stylesheet) throws Exception {

        // load the transformer using JAXP
        TransformerFactory factory = TransformerFactory.newInstance();
        Transformer transformer = factory.newTransformer(new StreamSource(stylesheet));

        // now lets style the given document
        DocumentSource source = new DocumentSource(document);
        DocumentResult result = new DocumentResult();
        transformer.transform(source, result);

        // return the transformed document
        Document transformedDoc = result.getDocument();
        return transformedDoc;
    }
}
</pre>
    </section>
</div>
</body>
</html>